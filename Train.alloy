sig Track {
	succs : set Track,
	signals : set Signal
}
sig Junction, Entry, Exit in Track {}

sig Signal {}
sig Semaphore, Speed extends Signal {}

// Specify the following properties
// You can check their correctness with the different commands and
// when specifying each property you can assume all the previous ones to be true

pred inv1 {
	// The station has at least one entry and one exit
  	some entry, exit : univ | entry in Entry and exit in Exit
}


pred inv2 {
	// Signals belong to one track
	all sinal : univ | sinal in Signal implies one track : Track | track->sinal in signals 
}


pred inv3 {
	// Exit tracks are those without successor
	//all entry : Entry | all exit : Exit | all junction : Junction | 
  	all track : univ | no track.^succs and track not in Junction and track not in Entry implies track in Exit
}


pred inv4 {
	// Entry tracks are those without predecessors
	all entry : Track | no succs.entry and (entry in Exit or entry not in Exit) and (entry in Junction or entry not in Junction)
}


pred inv5 {
	// Junctions are the tracks with more than one predecessor
	//all track : univ | track in Track and #track.^(succs)> 1 implies track in Junction and track not in Exit and track not in Entry
}


pred inv6 {
	// Entry tracks must have a speed signal
  	all entry : univ | entry in Entry implies some speed : Speed | entry->speed in signals

}


pred inv7 {
	// The station has no cycles
  	all track : univ | track in Track implies track not in track.^(succs)

}


pred inv8 {
	// It should be possible to reach every exit from every entry
	all entry : Entry | all exit : Exit | exit in entry.^succs or exit=entry
}


pred inv9 {
	// Tracks not followed by junctions do not have semaphores
	all track : Track | all junction : Junction | junction not in track.succs implies all signal : Semaphore | signal not in track.signals
}


pred inv10 {
	// Every track before a junction has a semaphore

}
